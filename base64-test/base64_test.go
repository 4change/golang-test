package base64_test

import (
	"encoding/base64"
	"fmt"
	"github.com/360EntSecGroup-Skylar/excelize"
	"io/ioutil"
	"strconv"
	"testing"
	"time"
)

func TestBase64(t *testing.T) {
	var base64Bytes []byte
	var err error

	// 文件流转 base64
	//	base64Str := `
	// 
	//`
	base64Str := `
UEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAANAAAAeGwvc3R5bGVzLnhtbNRUQYvbPBC9f79C6P7FSaBLKbKWdiFQaJeFTaFX2R45gpFkJDnY++vLyI5jbw899NRL5vlpZp7eMJF4HCyyK4RovCv5YbfnDFztG+Pakv84n/7/yFlMyjUKvYOSjxD5o/xPxDQivF4AEhssuljyS0rdp6KI9QWsijvfgRssah+sSnHnQ1vELoBqIhVZLI77/UNhlXFcCu1diqz2vUslP8yEFE5ZYFeFJX9SaKpguBQFkVJoZQ2O0+GR6ImQovboA0sXsDC1KjIjRXybsg+ZjG9Uk1VyiFJog7hcgnoSIUWnUoLgTgaRzfg8dlBy5x1QVvs0CRQLqhbqjlZtKDWHPwi0QY2H44e/08ghSlH50EDYDHmipEDQNIYpBNNe6GuOyXdSFPm38il5S4IzaIxqvVMksoK3rjOIUtSA+Er78lNv9AfNVNfh+BlN6ywQrRVG4BP9JddvObL2jvHv6557W0E45cXbnrwEn6BOedVnfrrk16bke85oVDfoXZqh6+3Jzh9SFIOmnVpZmgz++97YoH83ufjLbjcWF5ZVvcFk3K2nor/eM90RN02XgjWOUjTDfXY5kQgpkqoQtrJ7zhrQqsf0Yq4+5cOS3/E3WtrDw5J1XlqU/I6/Q2N6m1+NlQY9CsujJn8FAAD//1BLBwgFknYC6QEAABkFAABQSwMEFAAIAAgAAAAAAAAAAAAAAAAAAAAAABoAAAB4bC9fcmVscy93b3JrYm9vay54bWwucmVsc6zQsWr7MBDH8f3/FOL2v2WnUEqxnKUUshb3AYR9tkQkndBdW/vtCy40Cc2QIYuElu/vg9r9EoP6xMKekoGmqkFhGmj0aTbw3r/+fwLFYtNoAyU0sCLDvvvXvmGw4imx85nVEkNiA04kP2vNg8NouaKMaYlhohKtcEVl1tkORzuj3tX1oy7nDegumuowGiiHsQHV2zKjGPiicmSHKKy3q6mWGED1a8Zbpmma/IAvNHxETHJFoH8HoGv1OeY6bXeisawB+d6en+ptmIcTRhxG1Nt59y/aqn9FF0/uvgMAAP//UEsHCI9ZEZngAAAAVgIAAFBLAwQUAAgACAAAAAAAAAAAAAAAAAAAAAAAEwAAAHhsL3RoZW1lL3RoZW1lMS54bWzsmc9v2zYUx+/7KwjeV8k/ZMdBlSKx43Zr0haN26HHZ4mWWFOkQNJJfBva0y4DBnTDLgN222EYVmAFVuyyPyZAi637IwZJjk3adJsu7tANtQ8Rqc97/PI98lFyrl47zRg6JlJRwUNcu+JjRHgkYsqTEN8b9D/ewkhp4DEwwUmIp0ThazsfXYVtnZKMoNOMcbUNIU61zrc9T0UpyUBdETnhpxkbCZmBVleETLxYwgnlSca8uu+3vAwox4hDRkJ8ezSiEUGDwiXeOXe+z0hGuFZFR8TkUVSOaFqUbDyuFX/UVHWZRMfAQnxCeSxOBuRUY8RA6S6TIfbLD/Z2rnpzI6bX2Bp2/fIzs5sZxON6aSeT4dyw2Qyard25/3rlf5Xbb++39ltzfyUAUUT4TIvJBnudvV4wYw2ounT47rV7jZrFG/4bK/xuUHwtvrHgmyt8v99dxNCAqsvAEZN2vdu0+GDBt1b4tr/ba7YtvoRSRvl4hfaDVqN7Pts5MhLshhPvBM1+uz7DF5RnrK7Knut1ay2Dh0L2BddlckFTjvQ0JyOISIi7wOhQUnRAk1RjlAMXioTYr/t9v+HXy2+zvCojAtsEDOuqK1IrXYUepCJJcx3iT3Pg2EBePH9+9ujZ2aNfzx4/Pnv082zsVbsbwBPT7tUPX/313efoz1++f/XkazevTP7lT1+8/O3317nXlqxvnr589vTFt1/+8eMTB74rYWjiA5oRhW6RE3RXZMBdA5ChfDuLQQrUsoBUZOAA93VqgbemwFzcHrFDeF9SHrvA65OHltajVE40dYA308wCD4Vge0I6p3OzGMuczoQn7sHlxOTuAhy7xu4uJXh/kqckoy6X3ZRYMu8w4BoSwolGxT0xJsRh9oBSK66HNJJCiZFGDyjaA+oMyYAOtdvoBs2AwdQlcJCCFZvD+2hPMJf7Hjm2SeAJMJdLwqwwXoeJhsypGDJmkgegU5fIo6mMrIArLYEnhAm0HxOlXDa35dSSexMYdaf9kE0zm5Sajl3kAQhhkj0x7qaQ5U7NlKcm+4kaC8EA3RHaKULYO6RoC0aBr033fUr0223rezRJ3QukuDORri1BhL0fp2wEpHTuLZX0jPI31velyh78O5XdXXQ3UNPd4GWq+a6kzj21XMPXcf/Byt2DCb9DeOpCPxTuD4X7f1+41+3lzZfrRYX2KkPjyT1b++A+oowd6SkjB6qs7UowGvcpY2WjNJq/J+Rpl8nZcBaXSCivkRT6M6rToxRyEuJaOUKiZq4ThXKhQuzjtb6LG2ySHYq46q3Vzl9NYVuBXvT7wbxfU66r3lZ78Q42d1+2EmUKCEqnFxdhDGaLaDhEtBsXE1HzN6Wi41CxVXudCs/ICqMcAU9CHDQrRUhFwEhc5KmyP8/uxjO9Lpj2tOuO6XWaFwvyBTJtiTCWmy3CWIYpxGS5e8O57nTcqa47ZbS33kWuvdXawLjdQichbjUCH6MI8hCPGGiMoiyPQ6yKugks4SGO9CzQ/6Sy5FLpHqi0wspb1fwzqolEjGYh3jLTwPhCW63e9t9fcR3//Yuct5xkMhqRSK/pWTQPlK6cOO9eEi4aYqKJPErjEzRkE3kX4hAH7VoRwJgqPY9mTKWxuBdRXCpXs61o/WS22KLA8hRmJ4pZzCu8vJ7LMeZRKl2elecK4TDpb+LUfbPRjl001xwg7bVV7N0d8oaqhltV4Kx1na03nBKXPxAMaVtuaQ23tHVnxwYfCIzhWmviVn/tmXSJ02B51XrGc2XZWvnfhBg+JJHukRFMmFalVHKqJXTPf1WeV4LSdOfvAAAA//9QSwcINzD8GEwFAAB1GQAAUEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAYAAAAeGwvd29ya3NoZWV0cy9zaGVldDEueG1stJZNa9tIGMfv+ymGuduj17wYSSFZO2wOC8u+wR7Ho5E9RKMRo7GtsPTUQ0Ip5NK0UAppoYVeSg89tIc0/TK10576FYpke2IpIoSE6GBmxv/nN89Psgd5WzmPwZjKjInEh2bbgIAmRIQsGfjwn793WxsQZAonIY5FQn14QDO4FfziTYTcz4aUKpDLzoiFPvzfWFwtwzDM1nI0/1heDyDIeZxknVzaPhwqlXYQysiQcpy1OSNSZCJSbSI4ElHECEVZKikOy614jCzDXEOSjlnRr30Js24JczXMuoTdkuVolkaZzu1YxibaRByzVRImd2BhAgEnnb1BIiTux9SHJRHkEuTSArnU95Jf3UakNMl5HAnJscraQg4Qx3J/lLaI4ClWrM9ipg6KvdY0Jr9ZtxwTRHNCy043Ks587MORTDqL+pauL7btcEw6Yx4vw1cfWkPX8z27gow4TVTZL5I0xoqJJBuyNFvQbsK6cpvX5s0HXsg4TYqfAZA08uG2CQMP6cXAK2v+ZXSSrYyBwv2/aEyJoqEPlRxRCIr/WF+I/eL7vdCHRgHSFavjJWm3bPAPCUIa4VGs/hST3ygbDJUPTVdXL1OLoi5WOPCkmADpw6JZUgy2TQiUDzMlYeCNg6+fnk8fvbo4ezo9/uihceAhsgjuVIP/zV4eXrw7N6uhX28S6jaGLp6czk6OZs/ezF6cVvO9an76+nD24a2OICkmWsvSWlalJs9zyzA3jQ17cUDVWtqxyphds5mv1tuvoi3DXEemgerIXjU2PX7/7eHn6fnR95MvP84e32VqNrvb2t2+3t2quduN7vNVo+ZuN7vXkD37vtytZndHuzvXu9csd5xGd6fxuTvN7rXinnNf7k6zu6vd3evdnZq7O/eouTeudt1m9xqy596Xu1tzRytHWooH9HcsByzJQF8oJbgPjfa6C0EkhKKymNkQDCkO9SSmkSpTEMj5wVmOlUgXtYGHVriBh/SbUPAzAAD//1BLBwhlUn+g6QIAAE0JAABQSwMEFAAIAAgAAAAAAAAAAAAAAAAAAAAAAA8AAAB4bC93b3JrYm9vay54bWyMkU9v2zAMxe/7FALvjaUgDYLAcoFhG5bLEGBde1YkOiaiP4YkN8m3H2TXS4Zeenryo/wj+VQ/XZxlbxgTBS9BLDgw9DoY8kcJf55/PGyApay8UTZ4lHDFBE/Nl/oc4ukQwoldnPVJQpdzv62qpDt0Ki1Cj/7ibBuiUzktQjxWqY+oTOoQs7PVkvN15RR5mAjb+BlGaFvS+C3owaHPEySiVZmCTx31aaY5/RmcU/E09A86uF5lOpClfB2hwJze7o4+RHWwKOEiHmfyRTx+QDvSMaTQ5oUO7n3ID/sKXgkxrdzULVl8mVJnqu9/KVe6WGBWpfzdUEYjYQ3MhjP+Z8Sh/zqQNRLEarXk0NTVHav59y77yAy2arD5uUM31yWI9YoLAawlmzHuI70pfZWQ44CFdfu9qYu+EJ7TjVo+2Zm8CeefSMcuS9hwweHdeyWTuzLZhpe8XkdTAgd2vZ3vuhRcU1d3jca4ZmV+jOV3OQtgo7crmwOLWzIS4s6Iwhsrs6am1srqfWRFxvvL5VKMF6fC3QTN3wAAAP//UEsHCGBmGc2ZAQAAAQMAAFBLAwQUAAgACAAAAAAAAAAAAAAAAAAAAAAAEwAAAFtDb250ZW50X1R5cGVzXS54bWyslMFu4jAQhu/7FJGvq9iwh9VqlYTDbntsOdAHcO0JsbA9lmeg4e2rJBSpqEVQeokvmf/78ivjatEHX+wgk8NYi7mciQKiQeviuhZPq/vyjyiIdbTaY4Ra7IHEovlRrfYJqOiDj1SLjjn9VYpMB0GTxASxD77FHDSTxLxWSZuNXoP6NZv9VgYjQ+SShwzRVI87yNlZKJY684MOUAvVe8UdBJiec9kHL4p/0+DAroVOyTuj2WFUu2hPqCW2rTNg0WwDRJZjzM8hpanUG/BTNPHeA90MpZRBW+oAOHg5hV7s8IJ584y4+W6L4ZRBu3iZiUWzzJhI6ZRuVoGeIVqwZcqYILO7so9RntR43P5PvC/mmH+Z0bEXgxmuVzkshBymz7bxH1q99VzcDdVNW5rB09doGfz4DnUuHVkHwoeo8991GqDGW6F5DQAA//9QSwcICEuR5koBAABVBAAAUEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAALAAAAX3JlbHMvLnJlbHOM0sFKMzEQB/D79xRh7t1p+4GINO1FhN5E6gOMyexu2CQTkqjp24sH0YVa9/7nP78ZZndowas3zsVJ1LDp1qA4GrEuDhqeTw+rW1ClUrTkJbKGMxc47P/tnthTdRLL6FJRLfhYNIy1pjvEYkYOVDpJHFvwveRAtXSSB0xkJhoYt+v1DeafHbCfdaqj1ZCP9j+o0znxkm7pe2f4Xsxr4FgvjEBulaNlu0pZEufquIA6UR64arBiHrOkgpRS14IHvCzaLhf9vi0GrmSpEhrJfN3zmbgG2iwH/X2ieeJb0zy+S55eRKYvC85+YP8RAAD//1BLBwgXtjc47wAAAEsCAABQSwMEFAAIAAgAAAAAAAAAAAAAAAAAAAAAABAAAABkb2NQcm9wcy9hcHAueG1snM/PSjQxEATw+/cUoe87mc+DyJLJIvjn6mH0HpKe3UDSHdLtkvXpRQTXs8ei4EeVO4xazBm7ZKYF/k8zGKTIKdNxgdf1aXcHRjRQCoUJF7igwMH/cy+dG3bNKGbUQrLASbXtrZV4whpk4oY0atm416AycT9a3rYc8YHje0VSezPPtxaHIiVMu/YDwre4P+tf0cTxa5+8rZeGAt6trKGsuaKfnb0Gd99ayTFoZvLPbB5HxJI/0NnfhbPXs/4zAAD//1BLBwjzQZnEwQAAADEBAABQSwMEFAAIAAgAAAAAAAAAAAAAAAAAAAAAABEAAABkb2NQcm9wcy9jb3JlLnhtbKSRT2vzMAyH7++nCL4ncloo70KSHjZ62mCwjo3djK22ZvEfLHdxv/1I2qYd623gk36PHmSpXibTZV8YSDvbsLLgLEMrndJ227DX9Sr/zzKKwirROYsNOyCxZfuvlr6SLuBzcB5D1EhZMp2lSvqG7WL0FQDJHRpBhfNok+k2LhgRqXBhC17IT7FFmHG+AINRKBEFDMLcT0Z2Uio5Kf0+dKNAScAODdpIUBYlXNiIwdDNhjG5Io2OB4830XM40Yn0BPZ9X/TzEZ1xXsL70+PL+NVc22FVEllbK1nJgCK60KZ90DVcFerTlMcCqiyRro6znJO3+f3DesXaYUE5v8vLxZrzanwfg+tH/0VonNIb/QfjWdDW8OvC7XcAAAD//1BLBwiW4gU1HQEAAC0CAABQSwECFAAUAAgACAAAAAAABZJ2AukBAAAZBQAADQAAAAAAAAAAAAAAAAAAAAAAeGwvc3R5bGVzLnhtbFBLAQIUABQACAAIAAAAAACPWRGZ4AAAAFYCAAAaAAAAAAAAAAAAAAAAACQCAAB4bC9fcmVscy93b3JrYm9vay54bWwucmVsc1BLAQIUABQACAAIAAAAAAA3MPwYTAUAAHUZAAATAAAAAAAAAAAAAAAAAEwDAAB4bC90aGVtZS90aGVtZTEueG1sUEsBAhQAFAAIAAgAAAAAAGVSf6DpAgAATQkAABgAAAAAAAAAAAAAAAAA2QgAAHhsL3dvcmtzaGVldHMvc2hlZXQxLnhtbFBLAQIUABQACAAIAAAAAABgZhnNmQEAAAEDAAAPAAAAAAAAAAAAAAAAAAgMAAB4bC93b3JrYm9vay54bWxQSwECFAAUAAgACAAAAAAACEuR5koBAABVBAAAEwAAAAAAAAAAAAAAAADeDQAAW0NvbnRlbnRfVHlwZXNdLnhtbFBLAQIUABQACAAIAAAAAAAXtjc47wAAAEsCAAALAAAAAAAAAAAAAAAAAGkPAABfcmVscy8ucmVsc1BLAQIUABQACAAIAAAAAADzQZnEwQAAADEBAAAQAAAAAAAAAAAAAAAAAJEQAABkb2NQcm9wcy9hcHAueG1sUEsBAhQAFAAIAAgAAAAAAJbiBTUdAQAALQIAABEAAAAAAAAAAAAAAAAAkBEAAGRvY1Byb3BzL2NvcmUueG1sUEsFBgAAAAAJAAkAPgIAAOwSAAAAAA==
`

	if base64Bytes, err = base64.StdEncoding.DecodeString(base64Str); err != nil {
		fmt.Println(err)
	}

	// base64 文件流转 excel 文件
	path := "./demo.xlsx"
	if err = ioutil.WriteFile(path, base64Bytes, 0777); err != nil {
		fmt.Println(err)
	}

	// 读取 excel 文件
	f, err := excelize.OpenFile(path)
	if err != nil {
		fmt.Println(err)
		return
	}

	rows := f.GetRows("Sheet1")
	s := f.GetCellValue("Sheet1", "C2")
	fmt.Println("s--------------------------------------------------------------------", s)

	business_no_idx, y_tag_idx, valid_date_idx, desc_idx := -1, -1, -1, -1

	// 确定各行的索引
	for i, val := range rows[0] {
		switch val {
		case "业务编号":
			business_no_idx = i
			fmt.Println(business_no_idx)
		case "Y标签":
			y_tag_idx = i
			fmt.Println(y_tag_idx)
		case "Y标签生效日期":
			valid_date_idx = i
			fmt.Println(valid_date_idx)
		case "备注":
			desc_idx = i
			fmt.Println(desc_idx)
		}
	}

	// 确定是否有数据行缺失
	columnErr := ""
	if business_no_idx < 0 {
		columnErr += " \"业务编号\"列缺失 \t"
	}
	if y_tag_idx < 0 {
		columnErr += " \"Y标签\"列缺失 \t"
	}
	if valid_date_idx < 0 {
		columnErr += "\"Y标签生效日期\"列缺失 \t"
	}
	if desc_idx < 0 {
		columnErr += "\"备注\"列缺失 \t"
	}
	if columnErr != "" {
		fmt.Println(columnErr)
		return
	}

	for _, row := range rows[1:] {
		var atoi int
		fmt.Println(row[business_no_idx], row[y_tag_idx], row[valid_date_idx], row[desc_idx])

		atoi, err = strconv.Atoi(row[valid_date_idx])

		t, _ := time.ParseInLocation("2006-01-02 15:04:05", "1900-01-01 00:00:00", time.UTC)
		//excel 从 1900-1-0 起算日步长，且由于兼容Lotus 123，所以认定1900为闰年，实际为非闰年，所以需要-1
		t2 := t.AddDate(0, 0, atoi-1-1)
		fmt.Println(t)
		fmt.Println(t2.Format("2006-01-02"))
	}

	// Get value from cell by given worksheet name and axis.
	//cell, err := f.GetCellValue("Sheet1", "B2")
	//if err != nil {
	//	fmt.Println(err)
	//	return
	//}
	//fmt.Println(cell)

	// Get all the rows in the Sheet1.
	//rows, err := f.GetRows("Sheet1")
	//for _, row := range rows {
	//	for _, colCell := range row {
	//		fmt.Print(colCell, "\t")
	//	}
	//	fmt.Println()
	//}

	// 删除文件
	//if err = os.Remove(path); err != nil {
	//	fmt.Println(err)
	//}
}

func TestGenExecl(t *testing.T) {
	f := excelize.NewFile()
	// 创建一个工作表
	index := f.NewSheet("Sheet2")
	// 设置单元格的值
	f.SetCellValue("Sheet2", "A2", "Hello world.")
	f.SetCellValue("Sheet1", "B2", 100)
	f.SetCellValue("Sheet1", "C2", time.Now().Format("2006/01/02"))
	// 设置工作簿的默认工作表
	f.SetActiveSheet(index)
	// 根据指定路径保存文件
	path := "./Book1.xlsx"
	err := f.SaveAs(path)
	if err != nil {
		fmt.Println(err)
	}

	var bytes []byte

	bytes, err = ioutil.ReadFile(path)

	encodeToString := base64.StdEncoding.EncodeToString(bytes)

	fmt.Println("string(newBytes)---------------------------------------------------------------\n", encodeToString)
}
